<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:base="clr-namespace:Ty.Base.WpfBase;assembly=Ty.Base.WpfBase"
    xmlns:local="clr-namespace:Ty.Component.MenuBar">


    <ResourceDictionary.MergedDictionaries>
        <!--自定义资源引用-->
        <ResourceDictionary Source="/Ty.Base.WpfBase;component/Themes/Ty.Themes.Resource.xaml"/>
        <ResourceDictionary Source="/Ty.Base.WpfBase;component/Themes/Color/LightThemeResource.xaml"/>
        <ResourceDictionary Source="/Ty.Base.WpfBase;component/Themes/Ty.Thremes.Control.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--工具栏边框颜色-->
    <SolidColorBrush x:Key="ToolBarMenuBorder" Color="#808080"/>

    <!--工具栏背景颜色-->
    <SolidColorBrush x:Key="ToolBarSubMenuBackground" Color="#ffffffff"/>

    <!--工具栏背景颜色-->
    <SolidColorBrush x:Key="ToolBarGripper" Color="#C6C3C6"/>

    <!--工具栏左侧Thumb样式-->
    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border  Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <Rectangle>
                            <Rectangle.Fill>
                                <DrawingBrush TileMode="Tile" Viewbox="0,0,4,4" Viewport="0,0,4,4" ViewportUnits="Absolute" ViewboxUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="White" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z"/>
                                            <GeometryDrawing Brush="{StaticResource ToolBarGripper}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z"/>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--工具栏默认样式-->
    <Style TargetType="{x:Type local:MenuBar}">
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Height" Value="60"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MenuBar}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        </Border>

                        <Grid x:Name="Grid"  SnapsToDevicePixels="true">
                            <Rectangle VerticalAlignment="Bottom" StrokeThickness="0" Height="3">
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="#ccaeb1b6" />
                                        <GradientStop Color="#33c4c8cd" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>

                            <Grid >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition  Width="Auto"/>
                                    <ColumnDefinition  Width="Auto"/>
                                    <ColumnDefinition  Width="*"/>
                                    <ColumnDefinition  Width="Auto" />
                                    <ColumnDefinition  Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <Thumb x:Name="ToolBarThumb" 
                                       Margin="-3,-1,0,0"  
                                       DockPanel.Dock="Right" Padding="6,5,1,6"
                                       Style="{StaticResource ToolBarThumbStyle}" Width="15"/>

                                <ListBox Grid.Column="1" IsHitTestVisible="False" Margin="0,5" BorderThickness="0" ScrollViewer.VerticalScrollBarVisibility="Hidden" ScrollViewer.HorizontalScrollBarVisibility="Hidden" BorderBrush="Transparent" ItemsSource="{TemplateBinding HeaderCollection}">
                                    <ListBox.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal" IsItemsHost="True"/>
                                        </ItemsPanelTemplate>
                                    </ListBox.ItemsPanel>

                                    <ListBox.ItemTemplate>
                                        <DataTemplate>
                                            <Grid MaxWidth="5">
                                                <TextBlock Margin="-5,0" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Top" Text="{Binding}" TextWrapping="Wrap" />
                                            </Grid>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>


                                </ListBox>
                              
                                <ScrollViewer VerticalScrollBarVisibility="Hidden" 
                                              HorizontalScrollBarVisibility="Auto" 
                                              Style="{StaticResource CenterScrollViewer}"  
                                              Grid.Column="2" Padding="10,0,10,0">

                                    <Grid>
                                        <DockPanel Margin="0,0" HorizontalAlignment="Stretch">
                                            <DockPanel Margin="-5,0">
                                                <ItemsControl x:Name="PART_LEFTPANEL" ItemsSource="{TemplateBinding LeftControls}">
                                                    <ItemsControl.ItemsPanel>
                                                        <ItemsPanelTemplate>
                                                            <StackPanel Orientation="Horizontal" />
                                                        </ItemsPanelTemplate>
                                                    </ItemsControl.ItemsPanel>
                                                </ItemsControl>
                                            </DockPanel>

                                            <DockPanel Height="{TemplateBinding Height}" x:Name="PART_RIGHTPANEL" 
                                                   Width="Auto" 
                                                   HorizontalAlignment="Right" 
                                                   DockPanel.Dock="Right">
                                                <ItemsControl ItemsSource="{TemplateBinding RightControls}">
                                                    <ItemsControl.ItemsPanel>
                                                        <ItemsPanelTemplate>
                                                            <StackPanel Orientation="Horizontal" />
                                                        </ItemsPanelTemplate>
                                                    </ItemsControl.ItemsPanel>
                                                </ItemsControl>
                                            </DockPanel>
                                        </DockPanel>
                                    </Grid>
                                </ScrollViewer>
                            </Grid>
                        </Grid>
                        <Grid.Triggers>

                            <!--<Trigger Property="IsOverflowOpen" Value="true">

                <Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false"/>

            </Trigger>-->

                            <!--<Trigger Property="Header" Value="{x:Null}">

                <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>

            </Trigger>-->

                            <!--<Trigger Property="ToolBarTray.IsLocked" Value="true">

                                <Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>

                            </Trigger>-->

                            <!--<Trigger Property="HasDropShadow" SourceName="OverflowPopup" Value="true">

                <Setter Property="Padding" TargetName="Shdw" Value="0,0,5,5"/>

                <Setter Property="SnapsToDevicePixels" TargetName="Shdw" Value="true"/>

            </Trigger>

            <Trigger Property="IsEnabled" Value="false">

                <Setter Property="Foreground" Value="Gray"/>

            </Trigger>-->

                        </Grid.Triggers>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--矢量图标按钮默认模板-->
    <ControlTemplate x:Key="MenuIconButton_Template" TargetType="{x:Type local:MenuIconButton}">
        <Grid >
            <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Background}" 
                                    Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}" 
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CornerRadius}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}"/>

            <Grid  x:Name="grid">
                <Grid.LayoutTransform>
                    <TransformGroup>
                        <ScaleTransform x:Name="grid_scale" ScaleX="1" ScaleY="1" />
                    </TransformGroup>
                </Grid.LayoutTransform>
                <!--Icon/Text-->
                <StackPanel Orientation="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=Orientation}" VerticalAlignment="Center" 
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">

                    <TextBlock x:Name="icon"  Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FIconMargin}" 
                           RenderTransformOrigin="0.5,0.5" Style="{StaticResource FIcon}"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIcon}"
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIconSize}" 
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Foreground}" 
                           FontWeight="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= IconFontWeight}" 
                           HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock.RenderTransform>
                            <RotateTransform x:Name="transIcon" Angle="0"/>
                        </TextBlock.RenderTransform>
                    </TextBlock>

                    <TextBlock VerticalAlignment="Center"  x:Name="txt" 
                           TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}" 
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" 
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}" 
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                           HorizontalAlignment="Center" />
                </StackPanel>
            </Grid>

            <ProgressBar  Background="Transparent"  Opacity="0.5" Visibility="{TemplateBinding base:ControlAttachProperty.IsBuzy,Converter={x:Static base:XConverter.BooleanToVisibilityConverter}}" 
                                     BorderBrush="Transparent"  IsIndeterminate="True"
                                     BorderThickness="0">
                <ProgressBar.Clip>
                    <RectangleGeometry  RadiusX="{TemplateBinding base:ControlAttachProperty.CornerRadius}" RadiusY="{TemplateBinding base:ControlAttachProperty.CornerRadius}">
                        <RectangleGeometry.Rect>
                            <Rect Width="280" Height="52"/>
                        </RectangleGeometry.Rect>
                    </RectangleGeometry>
                </ProgressBar.Clip>
            </ProgressBar>

        </Grid>

        <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverBackground}" TargetName="border" />

                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}"/>

                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="icon"/>

                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="txt"/>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="0.8" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true"></Condition>
                    <Condition Property="AllowsAnimation" Value="true"></Condition>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="180" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"  Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"   Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"   Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>


            <Trigger Property="base:ControlAttachProperty.IsBuzy" Value="true">

                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>

                <Setter Property="Text" Value="{Binding Path=(base:ControlAttachProperty.BuzyText),RelativeSource={RelativeSource TemplatedParent}}" TargetName="txt"/>

                <Setter Property="IsEnabled" Value="False"/>

            </Trigger>

            <Trigger Property="IsChecked" Value="true">

                <Setter Property="Background" Value="{DynamicResource S_AccentBrush}" TargetName="border" />

                <Setter Property="Foreground" Value="{DynamicResource S_WhiteNotice}" TargetName="icon"/>

                <Setter Property="Foreground" Value="{DynamicResource S_WhiteNotice}" TargetName="txt"/>

                <!--<Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content,Converter={x:Static local:XConverter.SelectTextConverter}}" TargetName="txt"/>-->
            </Trigger>

            <Trigger Property="IsEnabled" Value="false">

                <Setter Property="Opacity" Value="0.5" TargetName="border"/>

                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>

            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--矢量图标按钮样式-->
    <Style x:Key="MenuIconButtonDefaultStyle" TargetType="{x:Type local:MenuIconButton}">
        <!--<Setter Property="Background" Value="{StaticResource S_AccentBrush}" />
        <Setter Property="Foreground" Value="{StaticResource S_WhiteNotice}" />
        <Setter Property="MouseOverBackground" Value="{StaticResource S_AccentBrushCommon}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource S_WhiteNotice}" />
        <Setter Property="PressedBackground" Value="{StaticResource S_GrayNotice}" />
        <Setter Property="PressedForeground" Value="{StaticResource S_WhiteNotice}" />-->

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MouseOverBackground" Value="Transparent" />
        <Setter Property="PressedBackground" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource TitleTextForeground}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource S_AccentBrush}" />
        <Setter Property="PressedForeground" Value="{StaticResource S_GrayNotice}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="45" />
        <Setter Property="Height" Value="45" />
        <Setter Property="FontSize" Value="8" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="Template" Value="{StaticResource MenuIconButton_Template}"/>
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="0,0,0,0" />
        <Setter Property="Margin" Value="0,2,0,0" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="Orientation" Value="Vertical"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="IconFontWeight" Value="Normal"/>
    </Style>

    <!--矢量图标选择按钮默认样式-->
    <Style TargetType="{x:Type local:MenuToggleButton}" x:Key="MenuToggleButtonDefaultStyle">
        <!--<Setter Property="Background" Value="{StaticResource S_AccentBrush}" />
        <Setter Property="Foreground" Value="{StaticResource S_WhiteNotice}" />
        <Setter Property="MouseOverBackground" Value="{StaticResource S_AccentBrushCommon}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource S_WhiteNotice}" />
        <Setter Property="PressedBackground" Value="{StaticResource S_GrayNotice}" />
        <Setter Property="PressedForeground" Value="{StaticResource S_WhiteNotice}" />-->

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MouseOverBackground" Value="Transparent" />
        <Setter Property="PressedBackground" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource AssistTextForeground}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource S_AccentBrush}" />
        <Setter Property="PressedForeground" Value="{StaticResource S_GrayNotice}" />


        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="45" />
        <Setter Property="Height" Value="45" />
        <Setter Property="FontSize" Value="8" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="0,0,0,0" />
        <Setter Property="Margin" Value="0,2,0,0" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="Orientation" Value="Vertical"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="IconFontWeight" Value="Normal"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MenuToggleButton}">
                    <Grid >
                        <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Background}" 
                                    Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}" 
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CornerRadius}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}"/>

                        <Grid  x:Name="grid">
                            <Grid.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform x:Name="grid_scale" ScaleX="1" ScaleY="1" />
                                </TransformGroup>
                            </Grid.LayoutTransform>
                            <!--Icon/Text-->
                            <StackPanel Orientation="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=Orientation}" VerticalAlignment="Center" 
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">

                                <TextBlock x:Name="icon"  Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FIconMargin}" 
                           RenderTransformOrigin="0.5,0.5" Style="{StaticResource FIcon}"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIcon}"
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIconSize}" 
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Foreground}" 
                           FontWeight="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= IconFontWeight}" 
                           HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <TextBlock.RenderTransform>
                                        <RotateTransform x:Name="transIcon" Angle="0"/>
                                    </TextBlock.RenderTransform>
                                </TextBlock>

                                <TextBlock VerticalAlignment="Center"  x:Name="txt" 
                           TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}" 
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" 
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}" 
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                           HorizontalAlignment="Center" />
                            </StackPanel>
                        </Grid>

                        <ProgressBar  Background="Transparent"  Opacity="0.5" Visibility="{TemplateBinding base:ControlAttachProperty.IsBuzy,Converter={x:Static base:XConverter.BooleanToVisibilityConverter}}" 
                                     BorderBrush="Transparent"  IsIndeterminate="True"
                                     BorderThickness="0">
                            <ProgressBar.Clip>
                                <RectangleGeometry  RadiusX="{TemplateBinding base:ControlAttachProperty.CornerRadius}" RadiusY="{TemplateBinding base:ControlAttachProperty.CornerRadius}">
                                    <RectangleGeometry.Rect>
                                        <Rect Width="280" Height="52"/>
                                    </RectangleGeometry.Rect>
                                </RectangleGeometry>
                            </ProgressBar.Clip>
                        </ProgressBar>

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverBackground}" TargetName="border" />

                            <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}"/>

                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="icon"/>

                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="txt"/>


                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="0.8" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"></Condition>
                                <Condition Property="AllowsAnimation" Value="true"></Condition>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="180" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"  Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"   Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"   Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="base:ControlAttachProperty.IsBuzy" Value="true">

                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>

                            <Setter Property="Text" Value="{Binding Path=(base:ControlAttachProperty.BuzyText),RelativeSource={RelativeSource TemplatedParent}}" TargetName="txt"/>

                            <Setter Property="IsEnabled" Value="False"/>

                        </Trigger>

                        <Trigger Property="IsChecked" Value="true">

                            <!--<Setter Property="Background" Value="{DynamicResource S_AccentBrush}" TargetName="border" />-->

                            <Setter Property="Foreground" Value="{DynamicResource S_AccentBrush}" TargetName="icon"/>

                            <Setter Property="Foreground" Value="{DynamicResource S_AccentBrush}" TargetName="txt"/>

                            <!--<Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content,Converter={x:Static local:XConverter.SelectTextConverter}}" TargetName="txt"/>-->
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">

                            <Setter Property="Opacity" Value="0.5" TargetName="border"/>

                            <Setter Property="Opacity" Value="0.5" TargetName="icon"/>

                            <Setter Property="Opacity" Value="0.5" TargetName="txt"/>

                            <!--<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />
                            
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                            
                            
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>-->

                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--矢量图标默认按钮样式-->
    <Style x:Key="MenuDefaultButtonDefaultStyle" TargetType="{x:Type local:MenuDefaultButton}">
        <Setter Property="Background" Value="{DynamicResource S_AccentBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource S_WhiteNotice}" />
        <Setter Property="MouseOverBackground" Value="{StaticResource S_AccentBrush}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource S_WhiteNotice}" />
        <Setter Property="PressedBackground" Value="{StaticResource S_OpacityGray}" />
        <Setter Property="PressedForeground" Value="{StaticResource S_WhiteNotice}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="28" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="Margin" Value="1,0" />
        <Setter Property="FIconSize" Value="15" />
        <Setter Property="Template" Value="{StaticResource MenuIconButton_Template}"/>
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="0,0,5,0" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="Orientation" Value="Horizontal" />
    </Style>

    <!--设置默认样式-->
    <Style  BasedOn="{StaticResource MenuDefaultButtonDefaultStyle}" TargetType="{x:Type local:MenuDefaultButton}"/>
    <Style BasedOn="{StaticResource MenuToggleButtonDefaultStyle}" TargetType="{x:Type local:MenuToggleButton}"/>
    <Style BasedOn="{StaticResource MenuIconButtonDefaultStyle}" TargetType="{x:Type local:MenuIconButton}"/>

    <!--工具栏容器样式-->
    <Style TargetType="{x:Type local:MenuBarPanel}">
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MenuBarPanel}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                        </Border>

                        <StackPanel>
                            <ItemsPresenter Visibility="{Binding ElementName=toggle,Path=IsChecked,Converter={x:Static base:XConverter.VisibilityConverter}}">

                            </ItemsPresenter>
                            <ToggleButton x:Name="toggle" Width="Auto" Height="10" HorizontalAlignment="Right" IsChecked="True">
                                <ToggleButton.Template>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Grid>
                                            <TextBlock Text="&#xe9bd;" Style="{StaticResource FIcon}" x:Name="txt" FontSize="{StaticResource DefaultFontSize}" ToolTip="显示工具栏"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="true">
                                                <Setter Property="Text" Value="&#xe9c0;" TargetName="txt" />
                                                <Setter Property="ToolTip" Value="隐藏工具栏" TargetName="txt" />
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Foreground" Value="{DynamicResource S_AccentBrush}" TargetName="txt"/>
                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter Property="Foreground" Value="{DynamicResource S_GrayNotice}" TargetName="txt"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="false">
                                                <Setter Property="Opacity" Value="0.5" TargetName="txt"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--图片资源的按钮-->
    <Style TargetType="{x:Type local:MenuImageButton}">
        <!--<Setter Property="Background" Value="{StaticResource S_AccentBrush}" />
        <Setter Property="Foreground" Value="{StaticResource S_WhiteNotice}" />
        <Setter Property="MouseOverBackground" Value="{StaticResource S_AccentBrushCommon}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource S_WhiteNotice}" />
        <Setter Property="PressedBackground" Value="{StaticResource S_GrayNotice}" />
        <Setter Property="PressedForeground" Value="{StaticResource S_WhiteNotice}" />-->


        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MouseOverBackground" Value="Transparent" />
        <Setter Property="PressedBackground" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource TitleTextForeground}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource S_AccentBrush}" />
        <Setter Property="PressedForeground" Value="{StaticResource S_GrayNotice}" />


        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="45" />
        <Setter Property="Height" Value="45" />
        <Setter Property="FontSize" Value="8" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="8,2" />
        <Setter Property="Margin" Value="0,2,0,0" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="Orientation" Value="Vertical"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="IconFontWeight" Value="Normal"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MenuImageButton}">
                    <Grid >
                        <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Background}" 
                                    Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}" 
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CornerRadius}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}"/>

                        <Grid  x:Name="grid">
                            <Grid.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform x:Name="grid_scale" ScaleX="1" ScaleY="1" />
                                </TransformGroup>
                            </Grid.LayoutTransform>
                            <!--Icon/Text-->
                            <StackPanel Orientation="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=Orientation}" VerticalAlignment="Center" 
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">

                                <Image  x:Name="icon"  Source="{TemplateBinding ImageSource}" Margin="{TemplateBinding FIconMargin}"/>

                                <TextBlock VerticalAlignment="Center"  x:Name="txt" 
                           TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}" 
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" 
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}" 
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                           HorizontalAlignment="Center" />
                            </StackPanel>
                        </Grid>

                        <ProgressBar  Background="Transparent"  Opacity="0.5" Visibility="{TemplateBinding base:ControlAttachProperty.IsBuzy,Converter={x:Static base:XConverter.BooleanToVisibilityConverter}}" 
                                     BorderBrush="Transparent"  IsIndeterminate="True"
                                     BorderThickness="0">
                            <ProgressBar.Clip>
                                <RectangleGeometry  RadiusX="{TemplateBinding base:ControlAttachProperty.CornerRadius}" RadiusY="{TemplateBinding base:ControlAttachProperty.CornerRadius}">
                                    <RectangleGeometry.Rect>
                                        <Rect Width="280" Height="52"/>
                                    </RectangleGeometry.Rect>
                                </RectangleGeometry>
                            </ProgressBar.Clip>
                        </ProgressBar>

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverBackground}" TargetName="border" />

                            <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}"/>

                            <!--<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="icon"/>-->

                            <Setter Property="Opacity" Value="0.7" TargetName="icon"/>

                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="txt"/>


                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="0.8" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"></Condition>
                                <Condition Property="AllowsAnimation" Value="true"></Condition>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="180" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <Trigger Property="IsPressed" Value="True">
                            <!--<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>-->

                            <Setter Property="Opacity" Value="0.5" TargetName="icon"/>
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"  Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"   Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"   Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="base:ControlAttachProperty.IsBuzy" Value="true">

                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />
                            <!--<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>-->
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>

                            <Setter Property="Text" Value="{Binding Path=(base:ControlAttachProperty.BuzyText),RelativeSource={RelativeSource TemplatedParent}}" TargetName="txt"/>

                            <Setter Property="IsEnabled" Value="False"/>

                        </Trigger>

                        <!--<Trigger Property="IsChecked" Value="true">

                            -->
                        <!--<Setter Property="Background" Value="{DynamicResource S_AccentBrush}" TargetName="border" />-->

                        <!--<Setter Property="Foreground" Value="{DynamicResource S_AccentBrush}" TargetName="icon"/>-->
                        <!--

                            <Setter Property="Foreground" Value="{DynamicResource S_AccentBrush}" TargetName="txt"/>

                            -->
                        <!--<Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content,Converter={x:Static local:XConverter.SelectTextConverter}}" TargetName="txt"/>-->
                        <!--
                        </Trigger>-->

                        <Trigger Property="IsEnabled" Value="false">

                            <Setter Property="Opacity" Value="0.5" TargetName="border"/>

                            <Setter Property="Opacity" Value="0.5" TargetName="icon"/>

                            <Setter Property="Opacity" Value="0.5" TargetName="txt"/>

                            <!--<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />
                            
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                            
                            
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>-->

                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--图片资源的选中按钮-->
    <Style TargetType="{x:Type local:MenuToggleImageButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MouseOverBackground" Value="Transparent" />
        <Setter Property="PressedBackground" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource AssistTextForeground}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource S_AccentBrush}" />
        <Setter Property="PressedForeground" Value="{StaticResource S_GrayNotice}" />


        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="45" />
        <Setter Property="Height" Value="45" />
        <Setter Property="FontSize" Value="8" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="8,2" />
        <Setter Property="Margin" Value="0,2,0,0" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="Orientation" Value="Vertical"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="IconFontWeight" Value="Normal"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MenuToggleImageButton}">
                    <Grid >
                        <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Background}" 
                                    Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}" 
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CornerRadius}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}"/>

                        <Grid  x:Name="grid">
                            <Grid.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform x:Name="grid_scale" ScaleX="1" ScaleY="1" />
                                </TransformGroup>
                            </Grid.LayoutTransform>
                            <!--Icon/Text-->
                            <StackPanel Orientation="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=Orientation}" VerticalAlignment="Center" 
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">

                                <Image  x:Name="icon"  Source="{TemplateBinding ImageSource}" Opacity="0.5" Margin="{TemplateBinding FIconMargin}"/>

                                <TextBlock VerticalAlignment="Center"  x:Name="txt" 
                           TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}" 
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" 
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}" 
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                           HorizontalAlignment="Center" />
                            </StackPanel>
                        </Grid>

                        <ProgressBar  Background="Transparent"  Opacity="0.5" Visibility="{TemplateBinding base:ControlAttachProperty.IsBuzy,Converter={x:Static base:XConverter.BooleanToVisibilityConverter}}" 
                                     BorderBrush="Transparent"  IsIndeterminate="True"
                                     BorderThickness="0">
                            <ProgressBar.Clip>
                                <RectangleGeometry  RadiusX="{TemplateBinding base:ControlAttachProperty.CornerRadius}" RadiusY="{TemplateBinding base:ControlAttachProperty.CornerRadius}">
                                    <RectangleGeometry.Rect>
                                        <Rect Width="280" Height="52"/>
                                    </RectangleGeometry.Rect>
                                </RectangleGeometry>
                            </ProgressBar.Clip>
                        </ProgressBar>

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverBackground}" TargetName="border" />

                            <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}"/>

                            <!--<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="icon"/>-->

                            <Setter Property="Opacity" Value="0.7" TargetName="icon"/>

                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="txt"/>


                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="0.8" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"></Condition>
                                <Condition Property="AllowsAnimation" Value="true"></Condition>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="180" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <Trigger Property="IsPressed" Value="True">
                            <!--<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>-->

                            <Setter Property="Opacity" Value="0.5" TargetName="icon"/>

                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"  Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"   Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"   Storyboard.TargetName="grid">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="base:ControlAttachProperty.IsBuzy" Value="true">

                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />

                            <!--<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>-->

                            <Setter Property="Opacity" Value="0.5" TargetName="icon"/>


                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>

                            <Setter Property="Text" Value="{Binding Path=(base:ControlAttachProperty.BuzyText),RelativeSource={RelativeSource TemplatedParent}}" TargetName="txt"/>

                            <Setter Property="IsEnabled" Value="False"/>

                        </Trigger>

                        <Trigger Property="IsChecked" Value="true">

                            <!--<Setter Property="Background" Value="{DynamicResource S_AccentBrush}" TargetName="border" />-->

                            <!--<Setter Property="Foreground" Value="{DynamicResource S_AccentBrush}" TargetName="icon"/>-->

                            <Setter Property="Opacity" Value="1" TargetName="icon"/>

                            <Setter Property="Foreground" Value="{DynamicResource S_AccentBrush}" TargetName="txt"/>

                            <!--<Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content,Converter={x:Static local:XConverter.SelectTextConverter}}" TargetName="txt"/>-->
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">

                            <Setter Property="Opacity" Value="0.5" TargetName="border"/>

                            <Setter Property="Opacity" Value="0.5" TargetName="icon"/>

                            <Setter Property="Opacity" Value="0.5" TargetName="txt"/>

                            <!--<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />
                            
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                            
                            
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>-->

                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
